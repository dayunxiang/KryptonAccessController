using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace MyComponents
{
    public delegate void updateGridviewRow(object sender, DataGridViewCellEventArgs e);
    

    [ToolboxBitmap(typeof(System.Windows.Forms.DataGridView))]
    public partial class DataGridViewWithCheckBox : ComponentFactory.Krypton.Toolkit.KryptonDataGridView//System.Windows.Forms.DataGridView
    {
        private DataGridViewColumn checkBoxColumn = new DataGridViewCheckBoxColumn(false);
        private datagridviewCheckboxHeaderCell checkBoxHeaderCell = new datagridviewCheckboxHeaderCell();
        private DataGridViewLinkColumn editLink = new DataGridViewLinkColumn();
        
        [Category("自定义参数设置")]
        [Description("获取/设置默认方式单选按钮控件")]
        private bool haveCheckbox = false;
        public bool HaveCheckbox
        {
            get { return haveCheckbox; }
            set
            {
                if (value == true)
                {
                    if (this.Columns.Contains(checkBoxColumn)==false)
                        addCheckBoxColumn(0, checkBoxColumn);
                }
                else
                {
                    if (this.Columns.Contains(checkBoxColumn))
                        this.Columns.Remove(checkBoxColumn);
                }
                haveCheckbox = value;
            }
        }
        [Category("自定义参数设置")]
        [Description("获取/设置默认方式单选按钮控件")]
        private bool haveEditLink = false;
        public  bool HaveEditLink
        {
            get { return haveEditLink; }
            set
            {
                if (value == true)
                {
                    if (this.Columns.Contains(editLink) == false)
                        addLinkColumn(0, editLink);
                }
                else
                {
                    if (this.Columns.Contains(editLink))
                        this.Columns.Remove(editLink);
                }
                haveEditLink = value;
            }
        }
        private void addLinkColumn(int index, DataGridViewLinkColumn editLink)
        {
            editLink.HeaderText = "Edit";
            editLink.DataPropertyName = "Edit";
            editLink.Text = "Edit";
            editLink.ActiveLinkColor = Color.Red;
            editLink.LinkBehavior = LinkBehavior.SystemDefault;
            editLink.LinkColor = Color.Blue;
            editLink.TrackVisitedState = true;
            editLink.VisitedLinkColor = Color.Gray;
            editLink.UseColumnTextForLinkValue = true;
            editLink.Width = 50;
            this.Columns.Insert(index, editLink);
        }

        private void addCheckBoxColumn(int index, DataGridViewColumn checkBoxColumn)
        {
            checkBoxColumn.HeaderCell = checkBoxHeaderCell;
            checkBoxColumn.Name = "CheckBoxColumn";
            checkBoxColumn.HeaderText = null;
            checkBoxColumn.Width = 50;
            this.Columns.Insert(index, checkBoxColumn);
        }

        //private new  bool AllowUserToAddRows = false;
        public DataGridViewWithCheckBox()
        {
            InitializeComponent();

            base.AllowUserToAddRows = false;

            this.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.dataGridViewWithCheckBox_CellContentClick);
            this.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dataGridViewWithCheckBox_CellFormatting);
            this.CurrentCellDirtyStateChanged += new System.EventHandler(this.dataGridViewWithCheckBox_CurrentCellDirtyStateChanged);
            checkBoxHeaderCell.OnCheckBoxClicked += new datagridviewcheckboxHeaderEventHander(ch_OnCheckBoxClicked);//关联单击事件
            
        }

        private void ch_OnCheckBoxClicked(object sender, datagridviewCheckboxHeaderEventArgs e)
        {
            foreach (DataGridViewRow dgvRow in this.Rows)
            {
                dgvRow.Cells[e.ColumnIndex].Value = e.CheckedState;
            }
            this.Refresh();
        }
        private void dataGridViewWithCheckBox_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dataGridView = (DataGridView)sender;

            if (dataGridView[e.ColumnIndex, e.RowIndex].Value != null)
                e.Value = dataGridView[e.ColumnIndex, e.RowIndex].Value.ToString().Trim();

            if (e.ColumnIndex == checkBoxHeaderCell.ColumnIndex)
                dataGridView.CurrentCell.ReadOnly = false;
            else if (dataGridView[e.ColumnIndex, e.RowIndex] is DataGridViewLinkCell)
                return;
            else
                dataGridView.CurrentCell.ReadOnly = true;
        }

        private void dataGridViewWithCheckBox_CurrentCellDirtyStateChanged(object sender, EventArgs e)
        {
            DataGridView dataGridView = (DataGridView)sender;
            if (dataGridView.IsCurrentCellDirty)
            {
                dataGridView.CommitEdit(DataGridViewDataErrorContexts.Commit);
            }
        }
        public event updateGridviewRow updateGridviewRow;
        private void dataGridViewWithCheckBox_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            DataGridView dataGridView = (DataGridView)sender;
            if (e.ColumnIndex < 0 || e.RowIndex < 0)
                return;
            if (dataGridView[e.ColumnIndex, e.RowIndex] is DataGridViewCheckBoxCell)
            {
                checkBoxHeaderCell.Checked = true;
                for (int row = 0; row < Rows.Count; row++)
                {
                    if (GetRowCheckBoxState(row) == false)
                    {
                        checkBoxHeaderCell.Checked = false;
                        break;
                    }
                }
            }
            else if (dataGridView[e.ColumnIndex, e.RowIndex] is DataGridViewLinkCell)
            {
                if (updateGridviewRow!=null)
                    updateGridviewRow(sender, e);
                return;
            }
            this.Refresh();
        }
        public bool GetRowCheckBoxState(int row)
        {

            DataGridViewCheckBoxCell checkCell = (DataGridViewCheckBoxCell)this.Rows[row].Cells[checkBoxHeaderCell.ColumnIndex];
            if (checkCell == null)
                return false;

            bool check = false;
            this.Invoke((EventHandler)delegate
            {
                check = (bool)checkCell.FormattedValue;
            });
            return check;
        }
    }
}
